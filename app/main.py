import streamlit as st
import pandas as pd
import pickle
import plotly.graph_objects as go
import numpy as np


def clean_data():
    bcancer = pd.read_csv('C:/Users/Saket Singh/Desktop/StreamLit_ML_cancer/data/data.csv')
    bcancer = bcancer.drop(['Unnamed: 32', 'id'], axis=1)  # deleting unnamed col and id because it's not req
    bcancer['diagnosis'] = bcancer['diagnosis'].map({'M': 1, 'B': 0})  # mapping diagnosis values to 1 and 0
    print(bcancer.head())
    return bcancer


def get_radar_chart(input_data):
    input_data = scaled_data(input_data)
    categories = [
        "Radius", "Texture", "Perimeter",
        "Area", "Smoothness", "Compactness", "Concavity",
        "Concave points", "Symmetry", "Fractal_dimension"
    ]

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=[
            input_data['radius_mean'], input_data['texture_mean'], input_data['perimeter_mean'],
            input_data['area_mean'], input_data['smoothness_mean'], input_data['compactness_mean'],
            input_data['concavity_mean'], input_data['concave points_mean'], input_data['symmetry_mean'],
            input_data['fractal_dimension_mean']
        ],
        theta=categories,
        fill='toself',
        name='Mean Value'
    ))
    fig.add_trace(go.Scatterpolar(
        r=[
            input_data['radius_se'], input_data['texture_se'], input_data['perimeter_se'], input_data['area_se'],
            input_data['smoothness_se'], input_data['compactness_se'], input_data['concavity_se'],
            input_data['concave points_se'], input_data['symmetry_se'], input_data['fractal_dimension_se']
        ],
        theta=categories,
        fill='toself',
        name='Standard Value'
    ))

    fig.add_trace(go.Scatterpolar(
        r=[
            input_data['radius_worst'], input_data['texture_worst'], input_data['perimeter_worst'],
            input_data['area_worst'], input_data['smoothness_worst'], input_data['compactness_worst'],
            input_data['concavity_worst'], input_data['concave points_worst'], input_data['symmetry_worst'],
            input_data['fractal_dimension_worst']

        ],
        theta=categories,
        fill='toself',
        name='Worst Value'
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 1]
            )),
        showlegend=True
    )
    return fig


def add_sidebar():
    st.sidebar.header("Cell Nuclei Measurement")
    data = clean_data()
    input_dict = {}  # creating an empty dictionary

    slider_labels = [
        ("Radius (mean)", "radius_mean"),  # label, key values are used here
        ("Texture (mean)", "texture_mean"),
        ("Perimeter (mean)", "perimeter_mean"),
        ("Area (mean)", "area_mean"),
        ("Smoothness (mean)", "smoothness_mean"),
        ("Compactness (mean)", "compactness_mean"),
        ("Concavity (mean)", "concavity_mean"),
        ("Concave points (mean)", "concave points_mean"),
        ("Symmetry (mean)", "symmetry_mean"),
        ("Fractal dimension (mean)", "fractal_dimension_mean"),
        ("Radius (se)", "radius_se"),
        ("Texture (se)", "texture_se"),
        ("Perimeter (se)", "perimeter_se"),
        ("Area (se)", "area_se"),
        ("Smoothness (se)", "smoothness_se"),
        ("Compactness (se)", "compactness_se"),
        ("Concavity (se)", "concavity_se"),
        ("Concave points (se)", "concave points_se"),
        ("Symmetry (se)", "symmetry_se"),
        ("Fractal dimension (se)", "fractal_dimension_se"),
        ("Radius (worst)", "radius_worst"),
        ("Texture (worst)", "texture_worst"),
        ("Perimeter (worst)", "perimeter_worst"),
        ("Area (worst)", "area_worst"),
        ("Smoothness (worst)", "smoothness_worst"),
        ("Compactness (worst)", "compactness_worst"),
        ("Concavity (worst)", "concavity_worst"),
        ("Concave points (worst)", "concave points_worst"),
        ("Symmetry (worst)", "symmetry_worst"),
        ("Fractal dimension (worst)", "fractal_dimension_worst"),
    ]
    for label, key in slider_labels:  # creating a for loop to create slider for each (label and key) in slider_label
        input_dict[key] = st.sidebar.slider(  # the dict will store a new key value pair for each unique keys and
            label,  # update those new values from the output generated by the sliders
            min_value=float(data[key].min()),
            max_value=float(data[key].max()),
            value=float(data[key].mean())  # setting min, max and default value using min, max, and mean func
        )
    return input_dict


# to scale the value b/w 0 and 1 to enhance readability of graph
def scaled_data(input_dict):
    data = clean_data()
    x = data.drop(['diagnosis'], axis=1)
    scaled_dict = {}  # initialising with an empty dict to store the scaled data
    for key, value in input_dict.items():
        max_value = x[key].max()  # creates a max value col
        min_value = x[key].min()  # creates a min value col
        scaled_value = (value - min_value) / (
            max_value - min_value)  # formula to scale value, can only use sklearn.StandardScaler()
        scaled_dict[key] = scaled_value

    return scaled_dict


def add_prediction(input_data):
    model = pickle.load(open("model/model.pkl", "rb"))
    scaler = pickle.load(open("model/scaler.pkl", "rb"))

    input_array = np.array(list(input_data.values())).reshape(1, -1)  # since input_data is a dict and it wants a 2d
    # array we will convert it and reshape to make it col wise
    scaled_array = scaler.transform(input_array)  # scaling it to match the values properly
    prediction = model.predict(scaled_array)  # it stores in an array type of size 1
    st.subheader("Cell Cluster prediction")
    st.write("The Cell Cluster is: ")
    if prediction[0] == 1:
        st.write("Malicious")
    else:
        st.write("Benign")
    st.write("Probability of being a BENIGN: ", model.predict_proba(scaled_array)[0][0]) # we had transformed it into 2d
    st.write("Probability of being a MALICIOUS: ", model.predict_proba(scaled_array)[0][1])
    st.write("This app can assist medical professionals in making a diagnosis, but should not be used for a "
             "professional diagnosis.")


def main():
    st.set_page_config(
        page_title="Breast Cancer Predictor ",
        page_icon=":female-doctor:",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    with st.container():
        st.title('Breast Cancer Predictor')
        st.write('Please Connect this app to your cytology lab to help diagnose breast cancer from your tissue '
                 'sample. This app predicts using a machine learning model whether a breast mass is benign or '
                 'malignant based on the measurements it receives from your cytosis lab. You can also update the '
                 'measurements by hand using the sliders in the slidebar.')
    col1, col2 = st.columns([4, 1])
    input_data = add_sidebar()
    with col1:
        radar_chart = get_radar_chart(input_data)
        st.plotly_chart(radar_chart)
    with col2:
        add_prediction(input_data)


if __name__ == '__main__':
    main()
